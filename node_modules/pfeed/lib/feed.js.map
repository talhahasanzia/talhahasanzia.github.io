{"version":3,"sources":["../src/feed.js"],"names":["GENERATOR","DOCTYPE","Feed","options","items","categories","contributors","extensions","custom_fields","item","push","field_name","category","contributor","extension","format","console","warn","atom1","rss2","feed","_attr","xmlns","id","title","updated","ISODateString","Date","generator","root","author","name","email","link","uri","rel","href","atomLink","feedLinks","atom","hub","description","subtitle","image","logo","favicon","icon","copyright","rights","forEach","term","_item","entry","type","_cdata","date","summary","content","Array","isArray","oneAuthor","published","isAtom","isContent","channel","lastBuildDate","toUTCString","docs","rss","version","url","guid","indexOf","isPermaLink","pubDate","some","mrss","el","target","isItem","i","index","value","scheme","hasOwnProperty","label","community","communitygroup","statistics","starRating","length","embed","keywords","join","subTitle","player","mediagroup","torrent","metainfo","i_metainfo","Object","enclosure","size_in_bytes","previous_metainfo","isDefault","videos","videoParse","v","algo","map","thumbnail","i_thumbnail","optional_attr","nsfw","sortObject","o","keys","sort","reduce","r","k","home_page_url","json","feed_url","e","objects","feedItem","html_content","attachments","mime_type","date_modified","date_published","JSON","stringify","d","pad","n","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","module","exports"],"mappings":"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","file":"feed.js","sourcesContent":["import xml from \"xml\"\nimport has from \"lodash/has\"\nimport pick from \"lodash/pick\"\n\nconst GENERATOR = \"Feed for Node.js\"\nconst DOCTYPE = '<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n'\n\nclass Feed {\n  constructor(options) {\n    this.options = options\n    this.items = []\n    this.categories = []\n    this.contributors = []\n    this.extensions = []\n    this.custom_fields = []\n  }\n\n  addItem(item) {\n    this.items.push(item)\n  }\n\n  addCustomField(field_name) {\n    this.custom_fields.push(field_name)\n  }\n\n  addCategory(category) {\n    this.categories.push(category)\n  }\n\n  addContributor(contributor) {\n    this.contributors.push(contributor)\n  }\n\n  addExtension(extension) {\n    this.extensions.push(extension)\n  }\n\n  render(format) {\n    console.warn(\"DEPRECATED: use atom1() or rss2() instead of render()\")\n    if (format === \"atom-1.0\") {\n      return this.atom1()\n    } else {\n      return this.rss2()\n    }\n  }\n\n  atom1() {\n    const { options } = this\n\n    let feed = [\n      { _attr: { xmlns: \"http://www.w3.org/2005/Atom\" } },\n      { id: options.id },\n      { title: options.title },\n      {\n        updated: options.updated\n          ? this.ISODateString(options.updated)\n          : this.ISODateString(new Date())\n      },\n      { generator: options.generator || GENERATOR }\n    ]\n\n    let root = [{ feed }]\n\n    if (options.author) {\n      const { name, email, link } = options.author\n      let author = []\n\n      if (name) {\n        author.push({ name })\n      }\n\n      if (email) {\n        author.push({ email })\n      }\n\n      if (link) {\n        author.push({ uri: link })\n      }\n\n      feed.push({ author })\n    }\n\n    // link (rel=\"alternate\")\n    if (options.link) {\n      feed.push({ link: { _attr: { rel: \"alternate\", href: options.link } } })\n    }\n\n    // link (rel=\"self\")\n    const atomLink =\n      options.feed || (options.feedLinks && options.feedLinks.atom)\n    if (atomLink) {\n      feed.push({ link: { _attr: { rel: \"self\", href: atomLink } } })\n    }\n\n    // link (rel=\"hub\")\n    if (options.hub) {\n      feed.push({ link: { _attr: { rel: \"hub\", href: options.hub } } })\n    }\n\n    /**************************************************************************\n     * \"feed\" node: optional elements\n     *************************************************************************/\n\n    if (options.description) {\n      feed.push({ subtitle: options.description })\n    }\n\n    if (options.image) {\n      feed.push({ logo: options.image })\n    }\n\n    if (options.favicon) {\n      feed.push({ icon: options.favicon })\n    }\n\n    if (options.copyright) {\n      feed.push({ rights: options.copyright })\n    }\n\n    this.categories.forEach(category => {\n      feed.push({ category: [{ _attr: { term: category } }] })\n    })\n\n    this.contributors.forEach(_item => {\n      const { name, email, link } = _item\n      let contributor = []\n\n      if (name) {\n        contributor.push({ name })\n      }\n\n      if (email) {\n        contributor.push({ email })\n      }\n\n      if (link) {\n        contributor.push({ uri: link })\n      }\n\n      feed.push({ contributor })\n    })\n\n    // icon\n\n    /**************************************************************************\n     * \"entry\" nodes\n     *************************************************************************/\n    this.items.forEach(item => {\n      //\n      // entry: required elements\n      //\n\n      let entry = [\n        { title: { _attr: { type: \"html\" }, _cdata: item.title } },\n        { id: item.id || item.link },\n        { link: [{ _attr: { href: item.link } }] },\n        { updated: this.ISODateString(item.date) }\n      ]\n\n      //\n      // entry: recommended elements\n      //\n      if (item.description) {\n        entry.push({\n          summary: { _attr: { type: \"html\" }, _cdata: item.description }\n        })\n      }\n\n      if (item.content) {\n        entry.push({\n          content: { _attr: { type: \"html\" }, _cdata: item.content }\n        })\n      }\n\n      // entry author(s)\n      if (Array.isArray(item.author)) {\n        item.author.forEach(oneAuthor => {\n          const { name, email, link } = oneAuthor\n          let author = []\n\n          if (name) {\n            author.push({ name })\n          }\n\n          if (email) {\n            author.push({ email })\n          }\n\n          if (link) {\n            author.push({ uri: link })\n          }\n\n          entry.push({ author })\n        })\n      }\n\n      // content\n\n      // link - relative link to article\n\n      //\n      // entry: optional elements\n      //\n\n      // category\n\n      // contributor\n      if (Array.isArray(item.contributor)) {\n        item.contributor.forEach(item => {\n          const { name, email, link } = item\n          let contributor = []\n\n          if (name) {\n            contributor.push({ name })\n          }\n\n          if (email) {\n            contributor.push({ email })\n          }\n\n          if (link) {\n            contributor.push({ uri: link })\n          }\n\n          entry.push({ contributor })\n        })\n      }\n\n      // published\n      if (item.published) {\n        entry.push({ published: this.ISODateString(item.published) })\n      }\n\n      // source\n\n      // rights\n      if (item.copyright) {\n        entry.push({ rights: item.copyright })\n      }\n\n      feed.push({ entry: entry })\n    })\n\n    return DOCTYPE + xml(root, true)\n  }\n\n  rss2() {\n    const { options } = this\n    let isAtom = false\n    let isContent = false\n\n    let channel = [\n      { title: options.title },\n      { link: options.link },\n      { description: options.description },\n      {\n        lastBuildDate: options.updated\n          ? options.updated.toUTCString()\n          : new Date().toUTCString()\n      },\n      { docs: \"http://blogs.law.harvard.edu/tech/rss\" },\n      { generator: options.generator || GENERATOR }\n    ]\n\n    let rss = [{ _attr: { version: \"2.0\" } }, { channel }]\n\n    let root = [{ rss }]\n\n    /**\n     * Channel Image\n     * http://cyber.law.harvard.edu/rss/rss.html#ltimagegtSubelementOfLtchannelgt\n     */\n    if (options.image) {\n      channel.push({\n        image: [\n          { title: options.title },\n          { url: options.image },\n          { link: options.link }\n        ]\n      })\n    }\n\n    /**\n     * Channel Copyright\n     * http://cyber.law.harvard.edu/rss/rss.html#optionalChannelElements\n     */\n    if (options.copyright) {\n      channel.push({ copyright: options.copyright })\n    }\n\n    /**\n     * Channel Categories\n     * http://cyber.law.harvard.edu/rss/rss.html#comments\n     */\n    this.categories.forEach(category => {\n      channel.push({ category })\n    })\n\n    /**\n     * Feed URL\n     * http://validator.w3.org/feed/docs/warning/MissingAtomSelfLink.html\n     */\n    const atomLink =\n      options.feed || (options.feedLinks && options.feedLinks.atom)\n    if (atomLink) {\n      isAtom = true\n\n      channel.push({\n        \"atom:link\": {\n          _attr: {\n            href: atomLink,\n            rel: \"self\",\n            type: \"application/rss+xml\"\n          }\n        }\n      })\n    }\n\n    /**\n     * Hub for PubSubHubbub\n     * https://code.google.com/p/pubsubhubbub/\n     */\n    if (options.hub) {\n      isAtom = true\n      channel.push({\n        \"atom:link\": {\n          _attr: {\n            href: options.hub,\n            rel: \"hub\"\n          }\n        }\n      })\n    }\n\n    /**\n     * Channel Categories\n     * http://cyber.law.harvard.edu/rss/rss.html#hrelementsOfLtitemgt\n     */\n    this.items.forEach(entry => {\n      let item = []\n\n      // Handle custom fields\n      this.custom_fields.forEach(field_name => {\n        if (entry[field_name]) {\n          item.push({ [field_name]: entry[field_name] })\n        }\n      })\n\n      if (entry.title) {\n        item.push({ title: { _cdata: entry.title } })\n      }\n\n      if (entry.link) {\n        item.push({ link: entry.link })\n      }\n\n      if (entry.guid) {\n        if (entry.guid.indexOf(\"http\") === -1) {\n          item.push({\n            guid: { _cdata: entry.guid, _attr: { isPermaLink: \"false\" } }\n          })\n        } else {\n          item.push({ guid: entry.guid })\n        }\n      } else if (entry.link) {\n        item.push({ guid: entry.link })\n      }\n\n      if (entry.date) {\n        item.push({ pubDate: entry.date.toUTCString() })\n      }\n\n      if (entry.description) {\n        item.push({ description: { _cdata: entry.description } })\n      }\n\n      if (entry.content) {\n        isContent = true\n        item.push({ \"content:encoded\": { _cdata: entry.content } })\n      }\n      /**\n       * Item Author\n       * http://cyber.law.harvard.edu/rss/rss.html#ltauthorgtSubelementOfLtitemgt\n       */\n      if (Array.isArray(entry.author)) {\n        entry.author.some(author => {\n          if (author.email && author.name) {\n            item.push({ author: author.email + \" (\" + author.name + \")\" })\n            return true\n          } else if (author.name) {\n            rss[0]._attr[\"xmlns:dc\"] = \"http://purl.org/dc/elements/1.1/\"\n            item.push({ \"dc:creator\": author.name })\n            return true\n          }\n          return false\n        })\n      }\n\n      const mrss = (el, target, isItem = true) => {\n        /* categories for the item */\n        if (el.categories) {\n          rss[0]._attr[\"xmlns:media\"] = \"http://search.yahoo.com/mrss/\"\n          el.categories.forEach((i, index) => {\n            if (!i.value) return\n            target.push({\n              \"media:category\": [\n                i.value,\n                {\n                  _attr: {\n                    scheme: i.hasOwnProperty(\"scheme\")\n                      ? i.scheme\n                      : \"http://search.yahoo.com/mrss/category_schema\",\n                    label: i.hasOwnProperty(\"label\") ? i.label : null\n                  }\n                }\n              ]\n            })\n          })\n        }\n\n        /* community statistics and averaged input */\n        if (el.community) {\n          rss[0]._attr[\"xmlns:media\"] = \"http://search.yahoo.com/mrss/\"\n          let communitygroup = []\n\n          if (has(el.community, \"statistics\")) {\n            const i = el.community.statistics\n            communitygroup.push({\n              \"media:statistics\": [{ _attr: pick(i, [\"views\", \"favorites\"]) }]\n            })\n          }\n          if (has(el.community, \"starRating\")) {\n            const i = el.community.starRating\n            communitygroup.push({\n              \"media:starRating\": [\n                { _attr: pick(i, [\"average\", \"count\", \"min\", \"max\"]) }\n              ]\n            })\n          }\n\n          if (communitygroup.length > 0)\n            target.push({ \"media:community\": communitygroup })\n        }\n\n        /* embed if the el has it */\n        if (el.embed) {\n          rss[0]._attr[\"xmlns:media\"] = \"http://search.yahoo.com/mrss/\"\n          target.push({\n            \"media:embed\": [\n              {\n                _attr: pick(el.embed, [\n                  \"url\",\n                  \"width\",\n                  \"height\",\n                  \"type\",\n                  \"allowFullScreen\"\n                ])\n              }\n            ]\n          })\n        }\n\n        if (el.keywords) {\n          rss[0]._attr[\"xmlns:media\"] = \"http://search.yahoo.com/mrss/\"\n          target.push({ \"media:keywords\": [el.keywords.join(\", \")] })\n        }\n\n        if (el.subTitle) {\n          el.subTitle.forEach((i, index) => {\n            if (!has(i, \"href\") || !has(i, \"type\" || !has(i, \"lang\"))) return\n\n            rss[0]._attr[\"xmlns:media\"] = \"http://search.yahoo.com/mrss/\"\n            target.push({\n              \"media:subTitle\": [\n                {\n                  _attr: pick(i, [\"href\", \"type\", \"lang\"])\n                }\n              ]\n            })\n          })\n        }\n\n        /* player if the el has it */\n        if (el.player) {\n          rss[0]._attr[\"xmlns:media\"] = \"http://search.yahoo.com/mrss/\"\n          target.push({\n            \"media:player\": [\n              {\n                _attr: pick(el.player, [\"url\", \"width\", \"height\"])\n              }\n            ]\n          })\n        }\n\n        /**\n         * Feed supports *one* MRSS media:group\n         */\n        let mediagroup = []\n\n        /**\n         * rss feed only supports 1 enclosure per el, so switching to\n         * MRSS and its support for multiple enclosures is the next step.\n         */\n        if (el.torrent && isItem) {\n          let metainfo = el.torrent\n          if (!Array.isArray(metainfo)) metainfo = [metainfo]\n\n          metainfo.forEach((i, index) => {\n            let i_metainfo = i\n            if (!(i instanceof Object)) i_metainfo = { url: i }\n\n            if (index == 0) {\n              target.push({\n                enclosure: [\n                  {\n                    _attr: {\n                      type: \"application/x-bittorrent\",\n                      url: i_metainfo.url\n                    }\n                  }\n                ]\n              })\n              if (\"size_in_bytes\" in i_metainfo) {\n                target[target.length - 1].enclosure[0]._attr[\"length\"] =\n                  i_metainfo.size_in_bytes\n              }\n            } else {\n              if (index == 1) {\n                rss[0]._attr[\"xmlns:media\"] = \"http://search.yahoo.com/mrss/\"\n                let previous_metainfo = !(metainfo[0] instanceof Object)\n                  ? { url: metainfo[0] }\n                  : metainfo[0]\n                mediagroup.push({\n                  \"media:peerLink\": [\n                    {\n                      _attr: {\n                        type: \"application/x-bittorrent\",\n                        href: previous_metainfo.url,\n                        isDefault: \"true\"\n                      }\n                    }\n                  ]\n                })\n              }\n              mediagroup.push({\n                \"media:peerLink\": [\n                  {\n                    _attr: {\n                      type: \"application/x-bittorrent\",\n                      href: i_metainfo.url\n                    }\n                  }\n                ]\n              })\n            }\n          })\n        }\n\n        if (el.videos && isItem) {\n          el.videos.forEach(v => {\n            const videoParse = () => {\n              let content = [\n                {\n                  _attr: pick(v, [\n                    \"url\",\n                    \"fileSize\",\n                    \"type\",\n                    \"medium\",\n                    \"expression\",\n                    \"bitrate\",\n                    \"framerate\",\n                    \"samplingrate\",\n                    \"channels\",\n                    \"duration\",\n                    \"height\",\n                    \"width\",\n                    \"lang\"\n                  ])\n                }\n              ]\n              const algo = [\"md5\", \"sha-1\"]\n              algo.map(algo =>\n                has(v, algo)\n                  ? content.push({\n                      \"media:hash\": [{ _attr: { algo } }, v[algo]]\n                    })\n                  : \"\"\n              )\n              mrss(v, content, (isItem = false))\n              return content\n            }\n            mediagroup.push({\n              \"media:content\": videoParse()\n            })\n          })\n        }\n\n        if (mediagroup.length > 1) {\n          /* make redundant information for MRSS clients that only look for the media:group and its contents */\n          // mrss(entry, mediagroup, isItem = false) // isItem MUST be false, to prevent infinite recursion\n\n          target.push({ \"media:group\": mediagroup })\n        } else if (el.image) {\n          target.push({\n            enclosure: [\n              {\n                _attr: {\n                  length: el.image.length,\n                  type: el.image.type,\n                  url: el.image.url\n                }\n              }\n            ]\n          })\n        }\n\n        if (el.thumbnail) {\n          rss[0]._attr[\"xmlns:media\"] = \"http://search.yahoo.com/mrss/\"\n          let thumbnail = el.thumbnail\n          if (!Array.isArray(thumbnail)) thumbnail = [thumbnail]\n\n          thumbnail.forEach((i, index) => {\n            let i_thumbnail = i\n            if (!(i instanceof Object)) i_thumbnail = { url: i }\n\n            target.push({\n              \"media:thumbnail\": [{ _attr: { url: i_thumbnail.url } }]\n            })\n            ;[\"height\", \"width\", \"time\"].forEach(optional_attr => {\n              if (optional_attr in i_thumbnail)\n                target[target.length - 1][\"media:thumbnail\"][0]._attr[\n                  optional_attr\n                ] = i_thumbnail[optional_attr]\n            })\n          })\n        }\n\n        /* el properties which make sense in a setting where MRSS attributes are already present */\n        if (el.title && has(rss[0]._attr, \"xmlns:media\")) {\n          target.push({\n            \"media:title\": [el.title, { _attr: { type: \"plain\" } }]\n          })\n        }\n        if (el.description && has(rss[0]._attr, \"xmlns:media\")) {\n          target.push({\n            \"media:description\": [el.description, { _attr: { type: \"plain\" } }]\n          })\n        }\n      }\n\n      mrss(entry, item)\n\n      if (has(rss[0]._attr, \"xmlns:media\"))\n        item.push({ \"media:rating\": [item.nsfw ? \"adult\" : \"nonadult\"] })\n\n      channel.push({ item })\n    })\n\n    if (isContent) {\n      rss[0]._attr[\"xmlns:content\"] = \"http://purl.org/rss/1.0/modules/content/\"\n    }\n\n    if (isAtom) {\n      rss[0]._attr[\"xmlns:atom\"] = \"http://www.w3.org/2005/Atom\"\n    }\n\n    /**\n     * Sort properties to provide reproducible results for strict implementations\n     */\n    function sortObject(o) {\n      return Object.keys(o)\n        .sort()\n        .reduce((r, k) => ((r[k] = o[k]), r), {})\n    }\n    if (rss[0]._attr) rss[0]._attr = sortObject(rss[0]._attr)\n\n    return DOCTYPE + xml(root, true)\n  }\n\n  json1() {\n    const { options, items, extensions } = this\n    let feed = {\n      version: \"https://jsonfeed.org/version/1\",\n      title: options.title\n    }\n\n    if (options.link) {\n      feed.home_page_url = options.link\n    }\n\n    if (options.feedLinks && options.feedLinks.json) {\n      feed.feed_url = options.feedLinks.json\n    }\n\n    if (options.description) {\n      feed.description = options.description\n    }\n\n    if (options.image) {\n      feed.icon = options.image\n    }\n\n    if (options.author) {\n      feed.author = {}\n      if (options.author.name) {\n        feed.author.name = options.author.name\n      }\n      if (options.author.link) {\n        feed.author.url = options.author.link\n      }\n    }\n\n    extensions.forEach(e => {\n      feed[e.name] = e.objects\n    })\n\n    feed.items = items.map(item => {\n      let feedItem = {\n        id: item.id,\n        // json_feed distinguishes between html and text content\n        // but since we only take a single type, we'll assume HTML\n        html_content: item.content\n      }\n      if (item.link) {\n        feedItem.url = item.link\n      }\n      if (item.title) {\n        feedItem.title = item.title\n      }\n      if (item.description) {\n        feedItem.summary = item.description\n      }\n\n      if (item.torrent) {\n        let metainfo = item.torrent\n        if (!Array.isArray(metainfo)) metainfo = [metainfo]\n        if (!feedItem.attachments) feedItem.attachments = []\n\n        metainfo.forEach(i => {\n          let i_metainfo = i\n          if (!(i instanceof Object)) i_metainfo = { url: i }\n          feedItem.attachments.push({\n            ...i_metainfo,\n            mime_type: \"application/x-bittorrent\"\n          })\n        })\n      }\n\n      if (item.image) {\n        feedItem.image = item.image\n      }\n\n      if (item.date) {\n        feedItem.date_modified = this.ISODateString(item.date)\n      }\n      if (item.published) {\n        feedItem.date_published = this.ISODateString(item.published)\n      }\n\n      if (item.author) {\n        let author = item.author\n        if (author instanceof Array) {\n          // json feed only supports 1 author per post\n          author = author[0]\n        }\n        feedItem.author = {}\n        if (author.name) {\n          feedItem.author.name = author.name\n        }\n        if (author.link) {\n          feedItem.author.url = author.link\n        }\n      }\n\n      if (item.extensions) {\n        item.extensions.forEach(e => {\n          feedItem[e.name] = e.objects\n        })\n      }\n\n      return feedItem\n    })\n\n    return JSON.stringify(feed, null, 4)\n  }\n\n  ISODateString(d) {\n    function pad(n) {\n      return n < 10 ? \"0\" + n : n\n    }\n\n    return (\n      d.getUTCFullYear() +\n      \"-\" +\n      pad(d.getUTCMonth() + 1) +\n      \"-\" +\n      pad(d.getUTCDate()) +\n      \"T\" +\n      pad(d.getUTCHours()) +\n      \":\" +\n      pad(d.getUTCMinutes()) +\n      \":\" +\n      pad(d.getUTCSeconds()) +\n      \"Z\"\n    )\n  }\n}\n\nmodule.exports = Feed\n"]}